# -*- coding: utf-8 -*-

from pkg_resources import parse_version, Requirement
from setuptools import package_index

from .config import logger
from .config import VULNERABILITY_DB_URL
from .config import PYPI_URL

import json
import urllib2


class PloneCoreVulnerabilityChecker(object):
    """

    """

    def __init__(self, version, patch_list=[]):
        """

        """
        self.version = version

        ## relevant Pattern of response 
        #data = { 
        #   'hotfixes':[],
        #   'security':True,
        #   'maintenance':True,
        ## additional data:
        #   'name': version_number,
        #   'date' : release_date,
        #   }

        data = None

        try:
            # Request Vulnerability data base for version
            request = urllib2.Request(
                VULNERABILITY_DB_URL+"hotfix_json?version="+version)
            response = urllib2.urlopen(request, timeout=5)
            data = json.load(response)
        except urllib2.URLError:
            # Requested a URL that eigther don't exists, or respond.
            data = None

        if data == None:
            # Ifthe requested version is not avaliable or an Error 
            # on request has happend 
            # --> declare default data and system as secure
            data = { 
                'hotfixes':[],
                'security':True,
                'maintenance':True,
                }

        self.is_in_security_support = data.get(u'security', True)
        self.is_in_active_maintenance_support = data.get(u'maintenance', True)
        self._hotfixes = data.get(u'hotfixes', [])
        patch_prefix = 'Products.PloneHotfix'
        self.patches = []

        for hotfix in self._hotfixes:
            self.patches.append(patch_prefix+hotfix[u'name'])

        if self._hotfixes is None or self._hotfixes == []:
            self.is_secure = True
        else:
            if self.patches in patch_list:
                self.is_secure = True
            else:
                self.is_secure = False

        import ipdb; ipdb.set_trace()

    def get_patches(self):
        """

        """
        return self.patches