# -*- coding: utf-8 -*-

from pkg_resources import parse_version

__final_parts = '*final-', '*final'


def is_final_version(parsed_version):
    """Function copied from zc.buildout.easy_install._final_version"""
    for part in parsed_version:
        if (part[:1] == '*') and (part not in __final_parts):
            return False
    return True


def is_pre_final_version(parsed_version):
    """

    """
    return not is_final_version(parsed_version)


def to_version_string(parsed_version):
    """

    """
    version = ''
    for part in parsed_version:
        if (part[:1] == '*') and (part in __final_parts):
            version = version[:-1]
        elif (part[:1] == '*') and (part not in __final_parts):
            version = version[:-1]+part[1:]
        else:
            version += (str(int(part))+'.')
    return version


def next_larger_dev_version(parsed_version):
    """

    """
    version = ''
    if is_final_version(parsed_version):
        length = len(parsed_version)
        if length >= 4:
            version = str(int(parsed_version[length-3])+1)+'dev'
            pos = length-4
            while pos >= 0:
                version = str(int(parsed_version[pos])) + '.' + version
                pos = pos-1
        elif length == 3:
            version = str(int(parsed_version[0])) + \
                '.' + str(int(parsed_version[1])+1) + 'dev'
    else:
        i = 0
        version = ''
        for index in range(0, len(parsed_version)):
            if (parsed_version[index][:1] == '*'):
                i = index-1
                break
        for v in range(0, i):
            version += str(int(parsed_version[v])) + '.'
        version += str(int(parsed_version[i])+1)+'dev'
    return version


def next_larger_version(parsed_version, pkg):
    """
    :param parsed_version
    :param pkg
    """
    next_dev_version = next_larger_dev_version(parsed_version)
    for version_item in pkg:
        this_version = version_item.version
        if next_dev_version > parse_version(this_version):
            return this_version
